---
# tasks file for ocp4 install

- name: mkdir ~/.kube
  file:
    path: ~/.kube
    state: directory

- name: Enable oc bash completion
  shell: "oc completion bash >>/etc/bash_completion.d/oc_completion"

- name: Install kubeconfig
  copy:
    src: "{{ workdir }}/auth/kubeconfig"
    dest: "~/.kube/config"

# Run approve command till we have all workers ready. 'xargs -r ' is used to ignore empty stdin.
- name: Approve Worker CSRs
  shell: |
    oc get csr -ojson | jq -r '.items[] | select(.status == {} ) | .metadata.name' | xargs -r oc adm certificate approve
  until: lookup('pipe','oc get nodes | grep -w worker | grep -w Ready | wc -l') == worker_count
  retries: 30
  delay: 60

- name: Wait for install-complete
  shell: "openshift-install wait-for install-complete --log-level {{ log_level }}"
  args:
    chdir: "{{ workdir }}"

- name: Configure nfs-provisioner
  shell: helpernodecheck nfs-setup
  when: storage_type == "nfs"

# The image-registry is not always available immediately after the OCP installer
- name: Wait for image-registry operator
  shell: "oc get configs.imageregistry.operator.openshift.io/cluster --no-headers | wc -l"
  register: imgreg_operator_count
  until: imgreg_operator_count.stdout|int > 0
  retries: 20
  delay: 30

- name: Create and patch image-registry operator as registry-pvc
  tags: image-registry
  shell: |
    oc create -f /usr/local/src/registry-pvc.yaml -n openshift-image-registry
    oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"storage":{"pvc":{ "claim": "registry-pvc"}}, "managementState": "Managed"}}'
  when: storage_type == "nfs"

- name: Patch image-registry operator as emptyDir
  tags: image-registry
  shell: |
    oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"storage":{"emptyDir":{}}, "managementState": "Managed"}}'
  when: storage_type != "nfs"

- name: Create the default route for the image registry
  tags: image-registry
  shell: |
    oc patch configs.imageregistry.operator.openshift.io/cluster --patch '{"spec":{"defaultRoute":true}}' --type=merge
  
- name: Force install kubeconfig again
  copy:
    src: "{{ workdir }}/auth/kubeconfig"
    dest: "~/.kube/config"
    force: yes

- name: Create admin authentication using htpasswd
  tags: admin-user
  include: templates/create_oauth.yaml

- name: Copy yaml template
  tags: admin-user
  template:
    src: templates/ocp_install_scripts_create_admin_user.j2
    dest: "{{ workdir }}/create_admin_user.sh"
    owner: root
    group: root
    mode: 0755
  
- name: Create admin user
  tags: admin-user
  shell: "./create_admin_user.sh"
  args:
    chdir: "{{ workdir }}"

- name: Post install script
  tags: post
  template:
    src: "templates/ocp_install_scripts_post_install.j2"
    dest: "{{ workdir }}/ocp_install_scripts_post_install.sh"
    owner: root
    group: root
    mode: 0755

- name: Execute postinstall script
  tags: post
  shell: "./ocp_install_scripts_post_install.sh"
  args:
    chdir: "{{ workdir }}"

- name: Prepare for DB2 NFS-storage SELinux policy
  tags: sel-pol
  block:
  - name: Copy policy file and apply shell script
    copy:
      src: "{{ item }}"
      dest: "{{ workdir }}"
      owner: root
      group: root
      mode: 0755
    with_fileglob:
      - "templates/db2u-nfs.te"
      - "templates/db2_selinux_w.sh"

  - name: Copy the db2_selinux_prep script to the {{ workdir }} folder
    template:
      src: "templates/db2_selinux_prep.j2"
      dest: "{{ workdir }}/db2_selinux_prep.sh"
      owner: root
      group: root
      mode: 0755

  - name: Create the policy and apply on the worker nodes
    shell: "./db2_selinux_prep.sh"
    args:
      chdir: "{{ workdir }}"
  when: storage_type == "nfs"
